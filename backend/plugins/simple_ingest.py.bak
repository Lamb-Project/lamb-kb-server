"""
Simple ingestion plugin for text files.

This plugin handles plain text files (txt, md) with configurable chunking options.
"""

import os
import re
from pathlib import Path
from typing import Dict, List, Any, Optional

from .base import IngestPlugin, ChunkUnit, PluginRegistry


@PluginRegistry.register
class SimpleIngestPlugin(IngestPlugin):
    """Plugin for ingesting simple text files with configurable chunking."""
    
    name = "simple_ingest"
    description = "Ingest text files with configurable chunking options"
    supported_file_types = {"txt", "md", "markdown", "text"}
    
    def get_parameters(self) -> Dict[str, Dict[str, Any]]:
        """Get the parameters accepted by this plugin.
        
        Returns:
            A dictionary mapping parameter names to their specifications
        """
        return {
            "chunk_size": {
                "type": "integer",
                "description": "Size of each chunk",
                "default": 1000,
                "required": False
            },
            "chunk_unit": {
                "type": "string",
                "description": "Unit for chunking (char, word, line)",
                "enum": ["char", "word", "line"],
                "default": "char",
                "required": False
            },
            "chunk_overlap": {
                "type": "integer",
                "description": "Number of units to overlap between chunks",
                "default": 200,
                "required": False
            }
        }
    
    def ingest(self, file_path: str, **kwargs) -> List[Dict[str, Any]]:
        """Ingest a text file and split it into chunks.
        
        Args:
            file_path: Path to the file to ingest
            chunk_size: Size of each chunk (default: 1000)
            chunk_unit: Unit for chunking - char, word, or line (default: char)
            chunk_overlap: Number of units to overlap between chunks (default: 200)
            file_url: URL to access the file (default: None)
            
        Returns:
            A list of dictionaries, each containing:
                - text: The chunk text
                - metadata: A dictionary of metadata for the chunk
        """
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Starting ingestion for file: {file_path}")
        
        # Extract parameters with defaults
        chunk_size = kwargs.get("chunk_size", 1000)
        chunk_unit = ChunkUnit(kwargs.get("chunk_unit", "char"))
        chunk_overlap = kwargs.get("chunk_overlap", 200)
        file_url = kwargs.get("file_url", "")
        
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Parameters: chunk_size={chunk_size}, chunk_unit={chunk_unit}, chunk_overlap={chunk_overlap}")
        
        # Validate parameters
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Validating parameters")
        if chunk_size <= 0:
            print(f"DEBUG: [SimpleIngestPlugin.ingest] ERROR: chunk_size must be positive")
            raise ValueError("chunk_size must be positive")
        if chunk_overlap < 0:
            print(f"DEBUG: [SimpleIngestPlugin.ingest] ERROR: chunk_overlap must be non-negative")
            raise ValueError("chunk_overlap must be non-negative")
        if chunk_overlap >= chunk_size:
            print(f"DEBUG: [SimpleIngestPlugin.ingest] ERROR: chunk_overlap must be less than chunk_size")
            raise ValueError("chunk_overlap must be less than chunk_size")
        
        # Read the file
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Reading file: {file_path}")
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            print(f"DEBUG: [SimpleIngestPlugin.ingest] File read successfully, size: {len(content)} characters")
        except Exception as e:
            print(f"DEBUG: [SimpleIngestPlugin.ingest] ERROR reading file: {str(e)}")
            import traceback
            print(f"DEBUG: [SimpleIngestPlugin.ingest] Stack trace:\n{traceback.format_exc()}")
            raise
        
        # Get file metadata
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Getting file metadata")
        file_path_obj = Path(file_path)
        file_name = file_path_obj.name
        file_extension = file_path_obj.suffix.lstrip(".")
        file_size = os.path.getsize(file_path)
        
        # Create base metadata
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Creating base metadata")
        base_metadata = {
            "source": file_path,
            "filename": file_name,
            "extension": file_extension,
            "file_size": file_size,
            "file_url": file_url,  # Include the URL to access the file
            "chunking_strategy": self.name,
            "chunk_unit": str(chunk_unit),  # Convert to string to ensure it's serializable
            "chunk_size": chunk_size,
            "chunk_overlap": chunk_overlap
        }
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Base metadata created")
        
        # Split content into chunks based on the specified unit and size
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Splitting content into chunks")
        try:
            chunks = self._split_content(content, chunk_size, chunk_unit, chunk_overlap)
            print(f"DEBUG: [SimpleIngestPlugin.ingest] Content split into {len(chunks)} chunks")
        except Exception as e:
            print(f"DEBUG: [SimpleIngestPlugin.ingest] ERROR splitting content: {str(e)}")
            import traceback
            print(f"DEBUG: [SimpleIngestPlugin.ingest] Stack trace:\n{traceback.format_exc()}")
            raise
        
        # Create result documents with metadata
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Creating result documents")
        result = []
        for i, chunk_text in enumerate(chunks):
            if i % 10 == 0:  # Log every 10 chunks to avoid excessive logging
                print(f"DEBUG: [SimpleIngestPlugin.ingest] Processing chunk {i+1}/{len(chunks)}")
            
            chunk_metadata = base_metadata.copy()
            chunk_metadata.update({
                "chunk_index": i,
                "chunk_count": len(chunks)
            })
            
            result.append({
                "text": chunk_text,
                "metadata": chunk_metadata
            })
        
        print(f"DEBUG: [SimpleIngestPlugin.ingest] Ingestion completed, returning {len(result)} chunks")
        return result
    
    def _split_content(self, content: str, chunk_size: int, 
                      chunk_unit: ChunkUnit, chunk_overlap: int) -> List[str]:
        """Split content into chunks based on the specified unit and size.
        
        Args:
            content: Text content to split
            chunk_size: Size of each chunk
            chunk_unit: Unit for chunking (char, word, line)
            chunk_overlap: Number of units to overlap between chunks
            
        Returns:
            List of content chunks
        """
        if chunk_unit == ChunkUnit.CHAR:
            return self._split_by_chars(content, chunk_size, chunk_overlap)
        elif chunk_unit == ChunkUnit.WORD:
            return self._split_by_words(content, chunk_size, chunk_overlap)
        elif chunk_unit == ChunkUnit.LINE:
            return self._split_by_lines(content, chunk_size, chunk_overlap)
        else:
            raise ValueError(f"Unsupported chunk unit: {chunk_unit}")
    
    def _split_by_chars(self, content: str, chunk_size: int, chunk_overlap: int) -> List[str]:
        """Split content by characters.
        
        Args:
            content: Text content to split
            chunk_size: Number of characters per chunk
            chunk_overlap: Number of characters to overlap
            
        Returns:
            List of content chunks
        """
        print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] Starting character splitting")
        print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] Content length: {len(content)}, chunk_size: {chunk_size}, overlap: {chunk_overlap}")
        
        chunks = []
        start = 0
        content_len = len(content)
        
        iteration = 0
        print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] Starting iteration with content_len={content_len}")
        
        while start < content_len:
            iteration += 1
            if iteration > 100:  # Safeguard against infinite loops
                print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] WARNING: Breaking after 100 iterations")
                break
                
            print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] Iteration {iteration}, start={start}")
            end = min(start + chunk_size, content_len)
            print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] End position: {end}")
            chunk = content[start:end]
            print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] Adding chunk of length {len(chunk)}")
            chunks.append(chunk)
            start = end - chunk_overlap
            print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] New start position: {start}")
        
        print(f"DEBUG: [SimpleIngestPlugin._split_by_chars] Completed with {len(chunks)} chunks")
        return chunks
    
    def _split_by_words(self, content: str, chunk_size: int, chunk_overlap: int) -> List[str]:
        """Split content by words.
        
        Args:
            content: Text content to split
            chunk_size: Number of words per chunk
            chunk_overlap: Number of words to overlap
            
        Returns:
            List of content chunks
        """
        # Split into words (considering punctuation and whitespace)
        words = re.findall(r'\S+|\s+', content)
        chunks = []
        
        start = 0
        words_len = len(words)
        
        while start < words_len:
            end = min(start + chunk_size, words_len)
            chunks.append(''.join(words[start:end]))
            start = end - chunk_overlap
        
        return chunks
    
    def _split_by_lines(self, content: str, chunk_size: int, chunk_overlap: int) -> List[str]:
        """Split content by lines.
        
        Args:
            content: Text content to split
            chunk_size: Number of lines per chunk
            chunk_overlap: Number of lines to overlap
            
        Returns:
            List of content chunks
        """
        lines = content.splitlines(keepends=True)  # Keep line endings
        chunks = []
        
        start = 0
        lines_len = len(lines)
        
        while start < lines_len:
            end = min(start + chunk_size, lines_len)
            chunks.append(''.join(lines[start:end]))
            start = end - chunk_overlap
        
        return chunks
